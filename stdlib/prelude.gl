# Goals stdlib prelude.
# Copyright (C) 2019 Richard W.M. Jones
# Copyright (C) 2019 Red Hat Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

# This file is included first and automatically in all Goalfiles
# (unless you use --no-prelude).  It contains standard functions and
# tactics.

# The only tactic that ‘make’ has.
tactic *file (filename) = @{
    # Rebuild if the target file doesn't exist at all.
    test -f %filename || exit 99

    # Otherwise rebuild if it is older than any dependency.
    for f in %<; do
        test %filename -ot "$f" && exit 99 ||:
    done
}

# This is a simpler tactic than the above since it will
# rebuild if the file is missing, but not if it is older.
tactic *exists (filename) = @{
    test -f %filename || exit 99
}

#----------------------------------------------------------------------
# Basic functions.

# Wrap list of strings in a call or tactic.
pure function wrap (wrapper, xs) = @{
    echo '['
    for x in %xs; do
        echo %wrapper "( "
        quoted_string "$x"
        echo " ),"
    done
    echo ']'
}

#----------------------------------------------------------------------
# Text functions.

# Join two lists.
pure function join (xs, ys) returning strings = @{
    for f in %xs %ys; do echo "$f"; done
}

# Sort + uniq a list.
pure function sort (xs) returning strings = @{
    for f in %xs; do echo "$f"; done | sort -u
}

# Substitute.
pure function subst (from, to, text) returning string = @{
    # We need to replace any / characters in ‘to’ with escaped ones.
    to="$( echo -n %to | sed 's,/,\\/,g' )"
    echo %text | sed -E s/%from/$to/g
}

#----------------------------------------------------------------------
# File functions.

# Base name.
pure function basename (name) returning string = @{
    basename %name
}

# Directory name.
pure function dirname (name) returning string = @{
    dirname %name
}

# File extension.
pure function extension (name) returning string = @{
    name=%name
    echo "${name##*.}"
}

# Expand a wildcard into a list of filenames.
#
# This function is probably not "pure" since it depends on the
# current working directory and also files may be created in
# the directory while goals is running which would affect the
# result.
function wildcard (wc) returning strings = @{
    shopt -s nullglob
    # Note that the substitution is quoted by goals, so to expand
    # it we must assign it to a variable and then use it unquoted.
    wc=%wc
    for f in $wc; do echo "$f"; done
}
